name: build-windows-wheel

on:
  workflow_dispatch:
    inputs:
      yices_version:
        description: "Upstream Yices version (e.g. 2.6.5)"
        required: true
  push:
    tags: [ "*.*.*" ]  # e.g. "2.6.5"
    branches:
      - main

jobs:
  build-wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
    env:
      YICES_VERSION: ${{ github.event.inputs.yices_version || (github.ref_name != 'main' && github.ref_name) || '2.6.4' }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: 3.12

    # download yices release
    - name: Download Yices release
      shell: bash
      run: |
        set -euo pipefail

        # for Windows, we are only targeting x86_64
        ARCH="x86_64"

        case "${YICES_VERSION}-${ARCH}" in
          2.6.5-x86_64) OS=pc-mingw64 ; EXTRA="" ;;
          2.6.4-x86_64) OS=pc-mingw64 ; EXTRA="" ;;
          *) echo "Unsupported Yices version/arch for Windows: ${YICES_VERSION}-${ARCH}" >&2 ; exit 1 ;;
        esac

        URL=https://github.com/SRI-CSL/yices2/releases/download/Yices-${YICES_VERSION}/yices-${YICES_VERSION}-x86_64-unknown-mingw32-static-gmp.zip
        echo "Downloading Yices from ${URL}" &&
        curl -sSL -o yices.zip ${URL} &&
        7z x yices.zip -o/tmp

    # stage artifacts into the Python package tree
    - name: Stage artifacts
      shell: bash
      run: |
        set -euo pipefail

        mkdir -p yices_solver/bin yices_solver/lib

        # don't copy from lib/, it only contains libyices.a and libyices.dll.a
        # note: libyices.dll is in bin/
        mv /tmp/yices-${YICES_VERSION}/bin/libyices.dll yices_solver/lib/
        mv /tmp/yices-${YICES_VERSION}/bin/* yices_solver/bin/


    # build the wheel
    - name: Build wheel
      shell: bash
      run: |
        python -m pip install --upgrade build setuptools wheel
        python -m build --wheel

    # repair / tag the wheel skipped for windows

    # upload the finished wheel
    - uses: actions/upload-artifact@v4
      with:
        name: wheel-${{ matrix.os }}
        path: dist/*.whl

  smoke-test:
    name: test ${{ matrix.os }} / py${{ matrix.py }}
    needs: build-wheel
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        py: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      # download wheels from build job artefacts
      - uses: actions/download-artifact@v4
        with:
          name: wheel-${{ matrix.os }}
          path: ./wheels

      - name: Install wheel and test
        shell: bash
        env:
          PYTHONUTF8: 1
        run: |
          set -euo pipefail

          python -m venv venv
          . venv/Scripts/activate

          pip install --no-index --find-links=./wheels yices-solver

          # list venv/Scripts/
          ls -la venv/Scripts/

          python - <<\'PY\'
          import os, subprocess
          from pathlib import Path
          from textwrap import indent

          venv_path = Path(os.environ["VIRTUAL_ENV"])

          binaries_to_test = ['yices.exe', 'yices-sat.exe', 'yices-smt.exe', 'yices-smt2.exe']
          for binary_name in binaries_to_test:
            binary_name = str(venv_path / "Scripts" / binary_name)
            print(f"Testing {binary_name}...")
            try:
              cmd = [binary_name, '--version']
              out = subprocess.check_output(cmd, text=True, stderr=subprocess.STDOUT).strip()
              print(indent(out, "  "))
              if out.startswith("Yices"):
                print(f"✔️ {binary_name} OK")
              else:
                print(f"❌ {binary_name} failed (unexpected --version output)")
            except Exception as e:
              print(f"❌ {binary_name} failed: {e}")

          print("✔️  smoke test passed")
          PY
