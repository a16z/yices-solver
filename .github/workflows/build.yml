name: build-and-upload-wheels

on:
  workflow_dispatch:
    inputs:
      yices_version:
        description: "Upstream Yices version (e.g. 2.6.5)"
        required: true
  push:
    tags: [ "*.*.*" ]  # e.g. "2.6.5"
    branches:
      - main

jobs:
  build-wheels:
    name: ${{ matrix.os == 'ubuntu-latest' && 'x86_64-linux' || matrix.os == 'macos-13' && 'x86_64-macos' || matrix.os == 'macos-14' && 'arm64-macos' || matrix.os == 'windows-latest' && 'x86_64-windows' }} wheel
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-13, macos-14, windows-latest ]

    env:
      YICES_VERSION: ${{ github.event.inputs.yices_version || (github.ref_name != 'main' && github.ref_name) || '2.6.4' }}
      PYTHON_VERSION: "3.12"             # just for the cibuildwheel driver
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: '${{ env.PYTHON_VERSION }}' }

      - run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel==2.18.1 delocate auditwheel

      # ──────────────────────────────
      # build the wheels
      #     * download the right Yices artefact inside CIBW_BEFORE_BUILD_*
      #     * run auditwheel/delocate to fix RPATH / @rpath
      # ──────────────────────────────
      - name: cibuildwheel
        run: cibuildwheel --output-dir wheelhouse
        shell: bash
        env:
          CIBW_BUILD_VERBOSITY: 2
          CIBW_SKIP: "pp* *musllinux* *i686*"          # keep the matrix lean
          CIBW_ARCHS_MACOS: "native"                   # x86_64 on macos-13, arm64 on macos-14
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_ENVIRONMENT: >-
            YICES_VERSION=${{ env.YICES_VERSION }}

          # ---------- Linux ----------
          # build once per container
          CIBW_BEFORE_ALL_LINUX: |
            set -euo pipefail

            SRC_DIR=/opt/yices-src
            BUILD_DIR=/opt/yices-build

            # build static GMP
            GMP_VERSION=6.3.0
            curl -sSL https://ftp.gnu.org/gnu/gmp/gmp-${GMP_VERSION}.tar.xz | tar -xJ
            pushd gmp-${GMP_VERSION}
              ./configure --disable-shared --enable-static --with-pic --prefix=/usr/local
              make -j$(nproc)

              # disable tests for now to speed up the build
              # make check

              make install
            popd

            dnf -y install gperf
            git clone --depth=1 https://github.com/SRI-CSL/yices2 ${SRC_DIR}z
            pushd ${SRC_DIR}
              autoconf
              ./configure \
                --with-pic-gmp=/usr/local/lib/libgmp.a \
                --with-pic-gmp-include-dir=/usr/local/include
              make show-config MODE=release
              make -j$(nproc)

              # stash the build artifacts in a shared location
              mv build ${BUILD_DIR}
            popd

          # copy the build artifacts in each wheel
          CIBW_BEFORE_BUILD_LINUX: |
            set -euo pipefail

            BUILD_DIR=/opt/yices-build

            mkdir -p yices2_binary/bin
            cp ${BUILD_DIR}/x86_64-pc-linux-gnu-release/bin/* yices2_binary/bin/

            # copy only the shared object, skip static libs (libyices.a)
            # copy under bin/, and let auditwheel place it where it needs to go
            cp ${BUILD_DIR}/x86_64-pc-linux-gnu-release/lib/libyices.so.* yices2_binary/bin

          CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
            bash -c "auditwheel repair --plat ${AUDITWHEEL_PLAT} -w {dest_dir} {wheel}"

          # ---------- macOS ----------
          CIBW_BEFORE_BUILD_MACOS: |
            set -euo pipefail

            ARCH=$(uname -m)
            if [ "${ARCH}" = "arm64" ]; then
              ARCH=arm
            fi

            case "${YICES_VERSION}-${ARCH}" in
              2.6.5-x86_64) OS=apple-darwin21.6.0 ; EXTRA="-static-gmp" ;;
              2.6.5-arm)    OS=apple-darwin22.6.0 ; EXTRA="-static-gmp" ;;
              2.6.4-x86_64) OS=apple-darwin20.6.0 ; EXTRA=""           ;;
              2.6.4-arm)    OS=apple-darwin20.6.0 ; EXTRA=""           ;;
              *) echo "Unsupported Yices version/arch: ${YICES_VERSION}-${ARCH}" >&2 ; exit 1 ;;
            esac

            URL=https://github.com/SRI-CSL/yices2/releases/download/Yices-${YICES_VERSION}/yices-${YICES_VERSION}-${ARCH}-${OS}${EXTRA}.tar.gz &&
            echo "Downloading Yices from ${URL}" &&
            curl -sSL -o /tmp/yices.tgz ${URL} &&
            tar -C /tmp -xzf /tmp/yices.tgz &&
            mkdir -p yices2_binary/bin &&
            mkdir -p yices2_binary/lib &&
            cp /tmp/yices-${YICES_VERSION}/bin/* yices2_binary/bin/ &&
            cp /tmp/yices-${YICES_VERSION}/lib/* yices2_binary/lib/
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: |
            delocate-wheel -v -w {dest_dir} {wheel}

          # ---------- Windows ----------
          CIBW_BEFORE_BUILD_WINDOWS: >-
            set -euo pipefail

            URL="https://github.com/SRI-CSL/yices2/releases/download/Yices-${YICES_VERSION}/yices-${YICES_VERSION}-x86_64-unknown-mingw32-static-gmp.zip"
            echo "📦  Fetching ${URL}"
            curl -sSL --fail -o yices.zip "${URL}"
            7z x yices.zip -oyices >/dev/null
            mkdir -p yices2_binary/bin yices2_binary/lib
            cp yices*/bin/*  yices2_binary/bin/
            cp yices*/lib/*  yices2_binary/lib/
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: ""

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

# ────────────────────────────────────────────────
  smoke-test:
    name: smoke-test ${{ matrix.os }} / py${{ matrix.py }}
    needs: build-wheels
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14, windows-latest]
        py: ['3.8', '3.12']
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      # download wheels from build job artefacts
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true   # puts them all under ./wheels

      - name: install wheel and test
        shell: bash
        run: |
          set -euo pipefail
          python -m venv venv
          source venv/bin/activate
          pip install --no-index --find-links=./wheels yices2-binary
          python - <<'PY'
          import subprocess
          from yices2_binary import BIN, LIB
          print("BIN=", BIN, "LIB=", LIB)

          out = subprocess.check_output(['yices-smt2', '--version'], text=True).strip()
          assert out.startswith("Yices"), out
          print("✔️  smoke test passed")
          PY
