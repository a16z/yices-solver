name: build-and-upload-wheels

on:
  workflow_dispatch:
    inputs:
      yices_version:
        description: "Upstream Yices version (e.g. 2.6.5)"
        required: true
  push:
    tags: [ "*.*.*" ]  # e.g. "2.6.5"
    branches:
      - main

jobs:
  wheels:
    name: ${{ matrix.os == 'ubuntu-latest' && 'x86_64-linux' || matrix.os == 'macos-13' && 'x86_64-macos' || matrix.os == 'macos-14' && 'arm64-macos' || matrix.os == 'windows-latest' && 'x86_64-windows' }} wheel
    runs-on: ${{ matrix.os }}
    shell: bash        # ⬅️ makes every run/script block a Bash shell
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-13, macos-14, windows-latest ]

    env:
      YICES_VERSION: ${{ github.event.inputs.yices_version || (github.ref_name != 'main' && github.ref_name) || '2.6.4' }}
      PYTHON_VERSION: "3.12"             # just for the cibuildwheel driver
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: '${{ env.PYTHON_VERSION }}' }

      - run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel==2.18.1 delocate auditwheel

      # ──────────────────────────────
      # build the wheels
      #     * download the right Yices artefact inside CIBW_BEFORE_BUILD_*
      #     * run auditwheel/delocate to fix RPATH / @rpath
      # ──────────────────────────────
      - name: cibuildwheel
        run: cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD_VERBOSITY: 2
          CIBW_SKIP: "pp* *musllinux* *i686*"          # keep the matrix lean
          CIBW_ARCHS_MACOS: "native"                   # x86_64 on macos-13, arm64 on macos-14
          CIBW_ENVIRONMENT: >-
            YICES_VERSION=${{ env.YICES_VERSION }}

          # ---------- Linux ----------
          CIBW_BEFORE_BUILD_LINUX: >-
            ARCH=x86_64

            # if [[ ${YICES_VERSION} == "2.6.5" ]]; then
            #   EXTRA="-static-gmp"
            # elif [[ ${YICES_VERSION} == "2.6.4" ]]; then
            #   EXTRA=""
            # else
            #   echo "Unsupported Yices version: ${YICES_VERSION}"
            #   exit 1
            # fi

            # URL=https://github.com/SRI-CSL/yices2/releases/download/Yices-${YICES_VERSION}/yices-${YICES_VERSION}-x86_64-pc-linux-gnu${EXTRA}.tar.gz &&
            # echo "Downloading Yices from ${URL}" &&
            # curl -sSL -o /tmp/yices.tgz ${URL} &&
            # tar -C /tmp -xzf /tmp/yices.tgz &&
            # mkdir -p yices2_binary/bin &&
            # mkdir -p yices2_binary/lib &&
            # cp /tmp/yices-${YICES_VERSION}/bin/* yices2_binary/bin/ &&
            # cp /tmp/yices-${YICES_VERSION}/lib/* yices2_binary/lib/

              git clone --depth=1 https://github.com/SRI-CSL/yices2
              cd yices2
              ./configure --static --static-gmp --static-cudd
              make -j$(nproc)
              cp bin/yices-smt2 ../yices2_binary/bin/
              cp lib/libyices.so  ../yices2_binary/lib/


          CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
            auditwheel repair --plat manylinux_2_17_x86_64 -w {dest_dir} {wheel}

          # ---------- macOS ----------
          CIBW_BEFORE_BUILD_MACOS: >-
            ARCH=$(uname -m)
            [[ "${ARCH}" == "arm64" ]] && ARCH=arm

            case "${YICES_VERSION}-${ARCH}" in
              2.6.5-x86_64) OS=apple-darwin21.6.0 ; EXTRA="-static-gmp" ;;
              2.6.5-arm)    OS=apple-darwin22.6.0 ; EXTRA="-static-gmp" ;;
              2.6.4-x86_64) OS=apple-darwin20.6.0 ; EXTRA=""           ;;
              2.6.4-arm)    OS=apple-darwin20.6.0 ; EXTRA=""           ;;
              *) echo "Unsupported Yices version/arch: ${YICES_VERSION}-${ARCH}" >&2 ; exit 1 ;;
            esac

            URL=https://github.com/SRI-CSL/yices2/releases/download/Yices-${YICES_VERSION}/yices-${YICES_VERSION}-${ARCH}-${OS}${EXTRA}.tar.gz &&
            echo "Downloading Yices from ${URL}" &&
            curl -sSL -o /tmp/yices.tgz ${URL} &&
            tar -C /tmp -xzf /tmp/yices.tgz &&
            mkdir -p yices2_binary/bin &&
            mkdir -p yices2_binary/lib &&
            cp /tmp/yices-${YICES_VERSION}/bin/* yices2_binary/bin/ &&
            cp /tmp/yices-${YICES_VERSION}/lib/* yices2_binary/lib/
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: |
            delocate-wheel -v -w {dest_dir} {wheel}

          # ---------- Windows ----------
          CIBW_BEFORE_BUILD_WINDOWS: >-
            set -euo pipefail
            URL="https://github.com/SRI-CSL/yices2/releases/download/Yices-${YICES_VERSION}/yices-${YICES_VERSION}-x86_64-unknown-mingw32-static-gmp.zip"
            echo "📦  Fetching ${URL}"
            curl -sSL --fail -o yices.zip "${URL}"
            7z x yices.zip -oyices >/dev/null
            mkdir -p yices2_binary/bin yices2_binary/lib
            cp yices*/bin/*  yices2_binary/bin/
            cp yices*/lib/*  yices2_binary/lib/
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: ""

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl
