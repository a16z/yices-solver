name: build-macos-wheel

on:
  workflow_dispatch:
    inputs:
      yices_version:
        description: "Upstream Yices version (e.g. 2.6.5)"
        required: true
  push:
    tags: [ "*.*.*" ]  # e.g. "2.6.5"
    branches:
      - main

jobs:
  build-wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-latest]
    env:
      YICES_VERSION: ${{ github.event.inputs.yices_version || (github.ref_name != 'main' && github.ref_name) || '2.6.4' }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        set -euo pipefail

        python -m pip install --upgrade pip build wheel auditwheel delocate setuptools

    - name: Print tool versions
      shell: bash
      run: |
        pip list

    # download yices release
    - name: Download Yices release
      shell: bash
      run: |
        set -euo pipefail

        ARCH=$(uname -m)
        if [ "${ARCH}" = "arm64" ]; then
          ARCH=arm
        fi

        case "${YICES_VERSION}-${ARCH}" in
          2.6.5-x86_64) OS=apple-darwin21.6.0 ; EXTRA="-static-gmp" ;;
          2.6.5-arm)    OS=apple-darwin22.6.0 ; EXTRA="-static-gmp" ;;
          2.6.4-x86_64) OS=apple-darwin20.6.0 ; EXTRA=""           ;;
          2.6.4-arm)    OS=apple-darwin20.6.0 ; EXTRA=""           ;;
          *) echo "Unsupported Yices version/arch: ${YICES_VERSION}-${ARCH}" >&2 ; exit 1 ;;
        esac

        URL=https://github.com/SRI-CSL/yices2/releases/download/Yices-${YICES_VERSION}/yices-${YICES_VERSION}-${ARCH}-${OS}${EXTRA}.tar.gz &&
        echo "Downloading Yices from ${URL}" &&
        curl -sSL -o /tmp/yices.tgz ${URL} &&
        tar -C /tmp -xzf /tmp/yices.tgz

    # stage artefacts into the Python package tree
    - name: Stage artefacts
      shell: bash
      run: |
        set -euo pipefail

        mkdir -p yices_solver/bin yices_solver/lib

        cp /tmp/yices-${YICES_VERSION}/bin/* yices_solver/bin/
        cp /tmp/yices-${YICES_VERSION}/lib/* yices_solver/lib/

    # build the wheel
    - name: Build wheel
      shell: bash
      run: |
        set -euo pipefail

        python -m build --wheel

        # try to see if the platform tag can be figured out automatically
        # python -m build --wheel \
        #  --config-setting=--plat-name=macosx_10_15_x86_64 -C--no-universal

    - name: Inspect wheel contents
      shell: bash
      run: |
        set -euo pipefail

        # Unpack the wheel
        python -m wheel unpack dist/*.whl

        # Show the contents using tree
        brew install tree
        echo "Wheel contents:"
        tree yices_solver-*

    # repair / tag the wheel for macos
    - name: Delocate wheel
      shell: bash
      run: |
        delocate-wheel --require-target-macos-version 11.0 -v -w dist/ dist/*.whl

    # upload the finished wheel
    - uses: actions/upload-artifact@v4
      with:
        name: wheel-${{ matrix.os }}
        path: dist/*.whl

  smoke-test:
    name: test ${{ matrix.os }} / py${{ matrix.py }}
    needs: build-wheel
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-latest]
        py: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      # download wheels from build job artifacts
      - uses: actions/download-artifact@v4
        with:
          name: wheel-${{ matrix.os }}
          path: ./wheels

      - name: Install wheel
        shell: bash
        run: |
          set -euo pipefail

          python -m venv venv
          source venv/bin/activate

          pip install --no-index --find-links=./wheels yices-solver

      - name: Inspect venv
        shell: bash
        run: |
          set -euo pipefail

          ls -la venv/bin/

      - name: Test binaries
        shell: bash
        run: |
          set -euo pipefail

          # activate the venv
          source venv/bin/activate

          # test that we can find the binaries in PATH after installing the package
          yices --version
          yices-smt --version
          yices-smt2 --version
          yices-sat --version

