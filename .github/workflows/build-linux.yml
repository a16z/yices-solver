name: build-linux-wheel

on:
  workflow_dispatch:
    inputs:
      yices_version:
        description: "Upstream Yices version (e.g. 2.6.5)"
        required: true
  push:
    tags: [ "*.*.*" ]  # e.g. "2.6.5"
    branches:
      - main
    paths:
      - 'pyproject.toml'
      - '.github/workflows/build-linux.yml'

jobs:
  build-wheel:
    runs-on: ubuntu-latest            # host runner
    container:                        # inside manylinux_2_28 tool-chain
      image: quay.io/pypa/manylinux_2_28_x86_64
    env:
      YICES_VERSION: ${{ github.event.inputs.yices_version || (github.ref_name != 'main' && github.ref_name) || '2.6.4' }}
      BUILD_DIR: /tmp/yices-build

    steps:
    - uses: actions/checkout@v4

    # add a modern Python (manylinux ships 3.11+ in /opt/python)
    - name: Use CPython 3.11 from manylinux toolchain
      run: |
        echo "/opt/python/cp311-cp311/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        set -euo pipefail

        python -m pip install --upgrade pip build wheel auditwheel setuptools

    - name: Print tool versions
      shell: bash
      run: |
        pip list

    # build static+PIC GMP, install to /usr/local
    - name: Build GMP
      shell: bash
      run: |
        set -euo pipefail
        GMP_VERSION=6.3.0
        curl -sSL "https://ftp.gnu.org/gnu/gmp/gmp-${GMP_VERSION}.tar.xz" | tar -xJ
        pushd "gmp-${GMP_VERSION}"
          ./configure --disable-shared --enable-static --with-pic --prefix=/usr/local
          make -j"$(nproc)"
          make install
        popd

    # build Yices from the requested tag
    - name: Build Yices
      shell: bash
      run: |
        set -euo pipefail

        # install build dependencies
        dnf -y install gperf

        git clone --depth 1 --branch "Yices-${YICES_VERSION}" \
          https://github.com/SRI-CSL/yices2 /tmp/yices

        pushd /tmp/yices
          autoconf
          ./configure \
            --with-pic-gmp=/usr/local/lib/libgmp.a \
            --with-pic-gmp-include-dir=/usr/local/include
          make show-config MODE=release
          make -j"$(nproc)"
          mv build ${BUILD_DIR}
        popd

    # stage artefacts into the Python package tree
    - name: Stage artefacts
      shell: bash
      run: |
        set -euo pipefail

        DIST_DIR=${BUILD_DIR}/x86_64-pc-linux-gnu-release/dist

        mkdir -p yices_solver/bin yices_solver/lib

        # list the binaries
        ls -la ${DIST_DIR}/bin/*

        # copy the binaries
        cp ${DIST_DIR}/bin/* yices_solver/bin/

        # copy only the shared object, skip static libs (libyices.a)
        cp ${DIST_DIR}/lib/libyices.so.* yices_solver/lib/

    # # repair / tag the wheel for manylinux_2_28
    # - name: Inspect required glibc / compatible manylinux version
    #   shell: bash
    #   run: |
    #     # auditwheel repair -w dist/ --plat manylinux_2_28_x86_64 dist/*.whl

    #     auditwheel show yices_solver/lib/libyices.so.*

    # build the wheel
    - name: Build wheel
      shell: bash
      env:
        SETUPTOOLS_SCM_PRETEND_VERSION: ${{ env.YICES_VERSION }}
      run: |
        echo "Building wheel for yices-solver version ${SETUPTOOLS_SCM_PRETEND_VERSION}"

        # https://stackoverflow.com/questions/73962721/how-to-create-platform-specific-python-wheel-with-build-tool
        python -m build --wheel \
          --config-setting="--build-option=--plat-name" \
          --config-setting="--build-option=manylinux_2_28_x86_64"
          # --config-setting="--build-option=--no-universal"

    - name: Verify wheel version
      shell: bash
      run: |
        set -euo pipefail
        echo "Verifying wheel file for yices-solver version ${YICES_VERSION}..."
        # Use a glob to find the wheel.
        WHEEL_FILES=(dist/yices_solver-${YICES_VERSION}-*.whl)
        if [ ${#WHEEL_FILES[@]} -eq 0 ] || [ ! -f "${WHEEL_FILES[0]}" ]; then
          echo "ERROR: Wheel for yices-solver version ${YICES_VERSION} not found in dist/ folder!"
          echo "Contents of dist/:"
          ls -la dist/
          exit 1
        elif [ ${#WHEEL_FILES[@]} -gt 1 ]; then
          echo "WARNING: Multiple wheels found for yices-solver version ${YICES_VERSION}. Verifying the first one."
          echo "Found files:"
          printf "%s\n" "${WHEEL_FILES[@]}"
        fi
        echo "Successfully found wheel for yices-solver version ${YICES_VERSION}:"
        ls -la "${WHEEL_FILES[0]}"

    - name: Inspect wheel contents
      shell: bash
      run: |
        set -euo pipefail

        # Unpack the wheel
        python -m wheel unpack dist/*.whl

        # Show the contents using tree
        yum install -y tree
        echo "Wheel contents:"
        tree yices_solver-*

    # upload the finished wheel
    - uses: actions/upload-artifact@v4
      with:
        name: wheel-linux
        path: dist/*.whl

  test-publish:
    # pypa/gh-action-pypi-publish@release/v1 is docker-based, so needs to run on a recent linux
    runs-on: ubuntu-latest
    needs: build-wheel
    permissions:
      id-token: write

    steps:
      # # download wheels from build job artefacts
    - uses: actions/download-artifact@v4
      with:
        name: wheel-linux
        path: dist/*.whl


    - name: Publish package distributions to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  smoke-test:
    name: test ${{ matrix.manylinux_image }} / py${{ matrix.py }}
    needs: test-publish
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.manylinux_image }}
    strategy:
      fail-fast: false
      matrix:
        py: ['3.9', '3.10', '3.11', '3.12', '3.13']
        manylinux_image:
          - quay.io/pypa/manylinux2010_x86_64
          - quay.io/pypa/manylinux2014_x86_64
          - quay.io/pypa/manylinux_2_24_x86_64
          - quay.io/pypa/manylinux_2_28_x86_64

    steps:
      # these github actions are not supported on manylinux images (glibc too old to run node)
      # - uses: actions/setup-python@v5
      #   with:
      #     python-version: ${{ matrix.py }}

      # # download wheels from build job artefacts
      # - uses: actions/download-artifact@v4
      #   with:
      #     name: wheel-${{ runner.os }}
      #     path: ./wheels

      - name: Install wheel
        shell: bash
        env:
          YICES_VERSION: ${{ github.event.inputs.yices_version || (github.ref_name != 'main' && github.ref_name) || '2.6.4' }}

        run: |
          set -euo pipefail

          python -m venv venv
          source venv/bin/activate

          pip install \
          --no-index \
          --index-url https://test.pypi.org/simple/ \
          "yices-solver==${YICES_VERSION}"

      - name: Inspect venv
        shell: bash
        run: |
          set -euo pipefail

          ls -la venv/bin/

      - name: Test binaries
        shell: bash
        run: |
          set -euo pipefail

          # activate the venv
          source venv/bin/activate

          # test that we can find the binaries in PATH after installing the package
          yices --version
          yices-smt --version
          yices-smt2 --version
          yices-sat --version

