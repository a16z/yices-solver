name: build-linux

on:
  workflow_call:
    inputs:
      yices_version:
        description: "Upstream Yices version (e.g. 2.6.5)"
        required: true
        type: string
      wheel_version:
        description: "Python wheel version (e.g. 2.6.5.post123)"
        required: true
        type: string
      run_local_tests:
        description: "Run local tests"
        required: true
        type: boolean
        default: true
      run_remote_tests:
        description: "Run remote tests"
        required: true
        type: boolean
        default: true

  workflow_dispatch:
    inputs:
      yices_version:
        description: "Upstream Yices version (e.g. 2.6.5)"
        required: true

  push:
    branches:
      - main
    paths:
      - 'pyproject.toml'
      - '.github/workflows/build-linux.yml'
      - '.github/actions/**'

env:
  YICES_VERSION: ${{ inputs.yices_version || github.event.inputs.yices_version || (github.ref_name != 'main' && github.ref_name) || '2.6.4' }}
  WHEEL_VERSION: ${{ inputs.wheel_version || format('{0}.post{1}', (inputs.yices_version || github.event.inputs.yices_version || (github.ref_name != 'main' && github.ref_name) || '2.6.4'), github.run_number) }}
  TEST_WHEEL_VERSION: ${{ inputs.wheel_version || format('{0}.post{1}', (inputs.yices_version || github.event.inputs.yices_version || (github.ref_name != 'main' && github.ref_name) || '2.6.4'), github.run_number) }}.dev${{ github.run_number }}

jobs:
  log-trigger:
    runs-on: ubuntu-latest
    steps:
      - name: Log trigger
        run: |
          echo "Trigger: ${{ github.event_name }}"
          echo "Event: ${{ toJson(github.event) }}"
          echo "Inputs: ${{ toJson(github.event.inputs) }}"

  build-wheel:
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      if: runner.os != 'Linux'
      with:
        python-version: 3.12

    - name: Setup Python (manylinux_2_28_x86_64)
      shell: bash
      env:
        MAJOR: 3
        MINOR: 11
      run: |
        set -euo pipefail

        # Locate Python in manylinux container
        PYBIN="/opt/python/cp${MAJOR}${MINOR}-cp${MAJOR}${MINOR}/bin"

        # Verify Python exists
        if [ ! -f "${PYBIN}/python3" ]; then
          echo "Python ${MAJOR}.${MINOR} not found at ${PYBIN}"
          echo "Available Python versions:"
          ls -la /opt/python/
          exit 1
        fi

        # Add to PATH and set as default
        echo "${PYBIN}" >> $GITHUB_PATH

        # Verify installation
        python3 --version

    - name: Install dependencies
      uses: ./.github/actions/install-dependencies
      with:
        use-sudo: false

    - name: Build Yices
      uses: ./.github/actions/build-yices
      with:
        yices-version: ${{ env.YICES_VERSION }}
        output-path: /tmp
        use-sudo: false

    - name: Stage artifacts
      shell: bash
      run: |
        set -euo pipefail

        mkdir -p yices_solver/bin yices_solver/lib

        cp /tmp/yices-${YICES_VERSION}/bin/* yices_solver/bin/
        cp /tmp/yices-${YICES_VERSION}/lib/* yices_solver/lib/

    - name: Build wheel
      shell: bash
      env:
        SETUPTOOLS_SCM_PRETEND_VERSION: ${{ env.WHEEL_VERSION }}
      run: |
        echo "Building wheel for yices-solver version ${WHEEL_VERSION}"

        # https://stackoverflow.com/questions/73962721/how-to-create-platform-specific-python-wheel-with-build-tool
        python3 -m build --wheel \
          --config-setting="--build-option=--plat-name" \
          --config-setting="--build-option=manylinux_2_28_x86_64"
          # --config-setting="--build-option=--no-universal"

    - name: Verify and inspect wheel
      uses: ./.github/actions/verify-wheel
      with:
        wheel-version: ${{ env.WHEEL_VERSION }}
        wheel-dir: dist/

    # upload the finished wheel
    - uses: actions/upload-artifact@v4
      with:
        name: wheel-linux
        path: dist/*.whl

  test-publish:
    # skip publishing to testpypi when called by another workflow
    # https://github.com/pypi/warehouse/issues/11096
    if: inputs.run_remote_tests == '' || inputs.run_remote_tests == 'true'

    # pypa/gh-action-pypi-publish@release/v1 is docker-based, so needs to run on a recent linux
    runs-on: ubuntu-latest
    needs: build-wheel
    environment: testpypi
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build wheel setuptools

    # Download the artifacts (yices binaries) from build job
    - uses: actions/download-artifact@v4
      with:
        name: wheel-linux
        path: original-dist/

    # Extract the wheel to get the yices binaries
    - name: Extract binaries from original wheel
      run: |
        python -m wheel unpack original-dist/*.whl
        # Copy the binaries to the expected location for rebuilding
        cp -r yices_solver-*/yices_solver ./

    # Rebuild wheel with test version
    - name: Build test wheel
      env:
        SETUPTOOLS_SCM_PRETEND_VERSION: ${{ env.TEST_WHEEL_VERSION }}
      run: |
        echo "Building test wheel for yices-solver version ${TEST_WHEEL_VERSION}"
        python -m build --wheel \
          --config-setting="--build-option=--plat-name" \
          --config-setting="--build-option=manylinux_2_28_x86_64"

    - name: Check token
      run: |
        echo "token-present=${{ secrets.TEST_PYPI_API_TOKEN != '' }}"

    - name: Publish package distributions to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        user: __token__
        verbose: true

  test-remote-artifacts:
    if: inputs.run_remote_tests == '' || inputs.run_remote_tests == 'true'

    name: manylinux_${{ matrix.manylinux_version }} / py${{ matrix.py }}
    needs: test-publish
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux_${{ matrix.manylinux_version }}_x86_64
    strategy:
      fail-fast: false
      matrix:
        # 3.11 and up are not supported on some manylinux images
        py: ['3.8', '3.9', '3.10']
        manylinux_version: ['2_28', '2_34']

    steps:
      - uses: actions/checkout@v4

      - name: Wait for PyPI index to be updated
        run: |
          sleep 600

      - name: Install wheel
        shell: bash
        run: |
          set -euo pipefail

          # Use Python from /opt/python matching the matrix version
          PYVER="${{ matrix.py }}"
          MAJOR="${PYVER%%.*}"
          MINOR="${PYVER#*.}"
          PYBIN="/opt/python/cp${MAJOR}${MINOR}-cp${MAJOR}${MINOR}/bin"

          $PYBIN/python -m venv venv
          source venv/bin/activate

          pip install -vv \
            --index-url https://test.pypi.org/simple/ \
            "yices-solver==${TEST_WHEEL_VERSION}"

      - name: Inspect venv
        shell: bash
        run: |
          ls -la venv/bin/

      - name: Test binaries
        uses: ./.github/actions/test-binaries
        with:
          venv-path: venv

  local-test:
    if: inputs.run_local_tests == '' || inputs.run_local_tests == 'true'

    name: local test / manylinux_${{ matrix.manylinux_version }} / py${{ matrix.py }}
    needs: build-wheel
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux_${{ matrix.manylinux_version }}_x86_64
    strategy:
      fail-fast: false
      matrix:
        py: ['3.8', '3.9', '3.10']
        manylinux_version: ['2_28', '2_34']

    steps:
      - uses: actions/checkout@v4

      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: wheel-linux
          path: dist/

      - name: Install wheel locally
        shell: bash
        run: |
          set -euo pipefail

          # Use Python from /opt/python matching the matrix version
          PYVER="${{ matrix.py }}"
          MAJOR="${PYVER%%.*}"
          MINOR="${PYVER#*.}"
          PYBIN="/opt/python/cp${MAJOR}${MINOR}-cp${MAJOR}${MINOR}/bin"

          $PYBIN/python -m venv venv
          source venv/bin/activate

          # Install the wheel directly from artifact
          pip install dist/*.whl

      - name: Inspect venv
        shell: bash
        run: |
          ls -la venv/bin/

      - name: Test binaries
        uses: ./.github/actions/test-binaries
        with:
          venv-path: venv
