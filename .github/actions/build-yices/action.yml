name: 'Build Yices from Source'
description: 'Build Yices SMT solver from source, including its dependencies (libpoly and CUDD)'

inputs:
  yices-version:
    description: 'Yices version to build (e.g. 2.6.5)'
    required: true
    default: '2.6.5'
  output-path:
    description: 'Directory where Yices will be built and installed'
    required: false
    default: '/tmp'
  gmp-version:
    description: 'GMP version to build'
    required: false
    default: '6.3.0'
  cudd-version:
    description: 'CUDD version to build'
    required: false
    default: '3.0.0'
  use-sudo:
    description: 'Whether to use sudo for building/installing'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Set up environment variables
      shell: bash
      run: |
        echo "INSTALL_DIR=${{ inputs.output-path }}/yices-${{ inputs.yices-version }}" >> $GITHUB_ENV
        echo "YICES_VERSION=${{ inputs.yices-version }}" >> $GITHUB_ENV

        case "${{ inputs.use-sudo }}" in
          true)  SUDO_CMD="sudo" ;;
          false) SUDO_CMD="" ;;
          *) echo "Invalid value for use-sudo: ${{ inputs.use-sudo }}" && exit 1 ;;
        esac

        echo "SUDO_CMD=$SUDO_CMD" >> $GITHUB_ENV

    - name: Build GMP
      shell: bash
      env:
        GMP_VERSION: ${{ inputs.gmp-version }}
      run: |
        set -euo pipefail

        # Download GMP tarball and signature
        echo "Downloading GMP tarball and signature..."
        curl -sSL https://ftp.gnu.org/gnu/gmp/gmp-${GMP_VERSION}.tar.xz -o gmp-${GMP_VERSION}.tar.xz
        curl -sSL https://ftp.gnu.org/gnu/gmp/gmp-${GMP_VERSION}.tar.xz.sig -o gmp-${GMP_VERSION}.tar.xz.sig

        # Import the GMP signing key (embedded for reliability)
        echo "Importing GMP signing key..."
        cat << 'EOF' | gpg --import
-----BEGIN PGP PUBLIC KEY BLOCK-----

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
3lIXaMiLvAfNoFNnWg==
=FW3C
-----END PGP PUBLIC KEY BLOCK-----
EOF

        # Verify the signature
        echo "Verifying GMP signature..."
        gpg --verify gmp-${GMP_VERSION}.tar.xz.sig gmp-${GMP_VERSION}.tar.xz

        # Extract only after verification succeeds
        echo "Extracting GMP tarball..."
        tar -xJ < gmp-${GMP_VERSION}.tar.xz

        # Clean up downloaded files
        rm -f gmp-${GMP_VERSION}.tar.xz gmp-${GMP_VERSION}.tar.xz.sig

        echo "Building GMP..."
        pushd gmp-${GMP_VERSION}
          ./configure \
            --disable-shared \
            --enable-static \
            --with-pic \
            --prefix=/usr/local

          make -j$(nproc)

          # uncomment to run tests
          # make check

          $SUDO_CMD make install
        popd

    - name: Build libpoly
      shell: bash
      run: |
        set -euo pipefail

        echo "Cloning libpoly..."
        git clone --depth 1 https://github.com/SRI-CSL/libpoly

        echo "Building libpoly..."
        pushd libpoly/build
          cmake .. \
            -DLIBPOLY_BUILD_STATIC=ON \
            -DLIBPOLY_BUILD_STATIC_PIC=ON \
            -DCMAKE_BUILD_TYPE=Release

          make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu) static_pic_poly
          $SUDO_CMD make install
        popd

    - name: Build CUDD
      shell: bash
      env:
        CUDD_VERSION: ${{ inputs.cudd-version }}
      run: |
        set -euo pipefail

        echo "Cloning CUDD..."
        git clone --branch cudd-${CUDD_VERSION} --single-branch --depth 1 https://github.com/ivmai/cudd

        echo "Building CUDD..."
        pushd cudd
          autoreconf -i

          ./configure --enable-silent-rules \
            --enable-static \
            --disable-shared \
            --prefix=/usr/local \
            CFLAGS="-O3 -fPIC"

          make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)

          # uncomment to run tests
          # make check

          $SUDO_CMD make install
        popd

    - name: Build Yices
      shell: bash
      run: |
        set -euo pipefail

        echo "Cloning Yices (branch: Yices-${YICES_VERSION})..."
        git clone --branch "Yices-${YICES_VERSION}" --depth 1 --single-branch \
          https://github.com/SRI-CSL/yices2

        echo "Building Yices..."
        pushd yices2
          # Configure and build Yices
          autoconf

          CPPFLAGS="-I/usr/local/include" \
          LDFLAGS="-L/usr/local/lib" \
          ./configure \
            --with-pic-gmp=/usr/local/lib/libgmp.a \
            --with-pic-gmp-include-dir=/usr/local/include \
            --with-pic-libpoly=/usr/local/lib/libpicpoly.a \
            --with-pic-libpoly-include-dir=/usr/local/include \
            --enable-mcsat \
            --disable-doc \
            --prefix="$INSTALL_DIR"

          N=$(nproc 2>/dev/null || sysctl -n hw.ncpu)
          make -j$N static-bin lib
        popd

    - name: Verify the build
      shell: bash
      run: |
        echo "Verifying the Yices build..."

        if [[ -d "yices2/build" ]]; then
          TARGET_DIR=$(ls -1d yices2/build/*-release 2>/dev/null | head -1)
        fi

        if [[ -z "$TARGET_DIR" || ! -d "$TARGET_DIR" ]]; then
          echo "::error::Could not find Yices build directory"
          exit 1
        fi

        # set the target directory in the environment (so it can be used in the next step)
        echo "TARGET_DIR=$TARGET_DIR" >> $GITHUB_ENV

        echo "TARGET_DIR: $TARGET_DIR"
        ls -la "$TARGET_DIR"

        echo "$TARGET_DIR/static_bin:"
        ls -la "$TARGET_DIR/static_bin"

        echo "$TARGET_DIR/lib:"
        ls -la "$TARGET_DIR/lib"

        # Check that the binaries exist and can run
        echo "yices --version"
        "$TARGET_DIR/static_bin/yices" --version

        echo "yices_smt2 --version"
        "$TARGET_DIR/static_bin/yices_smt2" --version

    - name: Move binaries to output directory
      shell: bash
      run: |
        set -euo pipefail

        echo "Moving binaries to output directory..."

        mkdir -p "$INSTALL_DIR/bin"
        mkdir -p "$INSTALL_DIR/lib"

        mv "$TARGET_DIR/static_bin/yices" "$INSTALL_DIR/bin"
        mv "$TARGET_DIR/static_bin/yices_sat" "$INSTALL_DIR/bin/yices-sat"
        mv "$TARGET_DIR/static_bin/yices_smt" "$INSTALL_DIR/bin/yices-smt"
        mv "$TARGET_DIR/static_bin/yices_smt2" "$INSTALL_DIR/bin/yices-smt2"

        # move both shared and static libraries to the install directory
        # (mirrors the official Yices releases)
        mv $TARGET_DIR/lib/* "$INSTALL_DIR/lib"

        echo "Done!"
